(function () {
  const sleep = (ms) => new Promise((res) => setTimeout(res, ms));
  const normalizeText = (el) => el?.textContent?.replace(/\s+/g, " ").trim() || "";
  let running = false;
  let completed = 0;
  let startTime = 0;
  let interval = null;

  // üìä UI: HUD
  const hud = document.createElement("div");
  Object.assign(hud.style, {
    position: "fixed",
    bottom: "10px",
    left: "10px",
    background: "rgba(0,0,0,0.85)",
    color: "#0f0",
    fontFamily: "monospace",
    fontSize: "12px",
    padding: "6px 12px",
    borderRadius: "6px",
    zIndex: "9999",
    whiteSpace: "pre",
  });
  document.body.appendChild(hud);

  // üü¢/üî¥ Start/Stop Button
  const button = document.createElement("button");
  button.textContent = "‚ñ∂Ô∏è Start Courier Bot";
  Object.assign(button.style, {
    position: "fixed",
    bottom: "10px",
    left: "180px",
    zIndex: "10000",
    padding: "6px 10px",
    background: "#111",
    color: "#0f0",
    border: "1px solid #0f0",
    fontSize: "12px",
    fontFamily: "monospace",
    cursor: "pointer",
    borderRadius: "4px",
  });
  document.body.appendChild(button);

  const updateHUD = (status) => {
    const elapsed = (Date.now() - startTime) / 1000;
    const rate = elapsed > 0 ? (completed / elapsed) * 3600 : 0;
    hud.textContent =
      `üì¶ Data Courier Bot\n` +
      `Status: ${status}\n` +
      `Completed: ${completed}\n` +
      `Elapsed: ${(elapsed / 60).toFixed(1)} min\n` +
      `Rate: ${rate.toFixed(2)} / hour`;
  };

  const log = (msg) => {
    console.log(msg);
    updateHUD(msg);
  };

  const clickIfExists = (query) => {
    const el = document.querySelector(query);
    if (el) {
      el.click();
      return true;
    }
    return false;
  };

  const resetAcknowledgement = async () => {
    if (clickIfExists("#confirmation-cancel-button")) {
      log("‚úÖ Acknowledged dialog");
      await sleep(1500);
    }
  };

  const waitFor = async (checkFn, timeout = 10000) => {
    const start = Date.now();
    while (Date.now() - start < timeout) {
      const result = checkFn();
      if (result) return result;
      await sleep(1650);
    }
    throw new Error(`Timeout waiting for dynamic content`);
  };

  const loop = async () => {
    startTime = Date.now();
    completed = 0;
    log("‚è≥ Starting loop...");
    while (running) {
      try {
        log("üîç Looking for mission...");
        const missionOffer = Array.from(document.querySelectorAll(".board-item"))
          .find((el) => {
            const title = normalizeText(el.querySelector("h4"));
            return title.includes("Data Courier") && title.includes("Melnibon√©");
          });

        if (!missionOffer) {
          log("‚è≥ Mission not found, retrying...");
          await sleep(2000);
          continue;
        }

        const acceptButton = missionOffer.querySelector("button[data-step='1']");
        if (acceptButton) {
          log("üü¢ Accepting mission...");
          acceptButton.click();
          await sleep(1600);
          await resetAcknowledgement();
        }

        log("üì° Step 1: Find active link");
        const activeLink = await waitFor(() =>
          Array.from(document.querySelectorAll("a.mission_board_title"))
            .find((a) => normalizeText(a).includes("Data Courier"))
        );
        activeLink.click();
        await sleep(1600);

        log("üö™ Step 2: Enter mission");
        const enterBtn = await waitFor(() =>
          document.querySelector("button[data-step='2']")
        );
        enterBtn.click();
        await sleep(1600);
        await resetAcknowledgement();

        log("üì° Step 3: Return to complete");
        const completeLink = await waitFor(() =>
          Array.from(document.querySelectorAll("a.mission_board_title"))
            .find((a) => normalizeText(a).includes("Data Courier"))
        );
        completeLink.click();
        await sleep(1600);

        log("üéÅ Step 4: Collect reward");
        const rewardBtn = await waitFor(() =>
          document.querySelector("button[data-step='3']")
        );
        rewardBtn.click();
        await sleep(1600);
        await resetAcknowledgement();

        completed++;
        log(`‚úÖ Completed mission #${completed}`);
        await sleep(1500);
      } catch (e) {
        console.warn("‚ùå Error occurred:", e.message);
        await resetAcknowledgement();
        log("üîÑ Recovering...");
        await sleep(3000);
      }
    }
    log("üõë Bot stopped.");
  };

  button.addEventListener("click", () => {
    running = !running;
    if (running) {
      button.textContent = "‚èπÔ∏è Stop Courier Bot";
      button.style.background = "#300";
      button.style.color = "#f55";
      log("‚ñ∂Ô∏è Starting loop...");
      loop();
    } else {
      button.textContent = "‚ñ∂Ô∏è Start Courier Bot";
      button.style.background = "#111";
      button.style.color = "#0f0";
      log("üõë Stopped by user.");
    }
  });
})();
